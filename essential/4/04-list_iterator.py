"""
Итератор (iterator) – это объект, который представляет поток данных.
Повторяемые вызовы метода __next__() (next() в Python 2) итератора
или передача его встроенной функции next() возвращает последующие
элементы потока.

Если больше не осталось данных, выбрасывается исключение StopIteration.
После этого итератор исчерпан и любые последующие вызовы его метода __next__()
снова генерируют исключение StopIteration.

Итераторы обязаны иметь метод __iter__, который возвращает сам объект итератора.
Таким образом, любой итератор сам по себе также является итерабельным объектом.
"""


# Функция обхода итерабельного объекта
def traverse(iterable):
    print('Traversing {}:'.format(type(iterable).__name__))
    for element in iterable:
        print(element)
    print()


# Объявление списка
my_list = [1, 2, 3, 5, 8]

# Получение его итератора
list_iterator = iter(my_list)

# Обход списка
traverse(my_list)

# Обход итератора списка
traverse(list_iterator)

# Очередной обход списка -- работает корректно, так как создаётся
# новый объект-итератор
traverse(my_list)

# Очередной обход итератора -- не выводится ничего, так как
# элементы в итераторе уже исчерпаны
traverse(list_iterator)