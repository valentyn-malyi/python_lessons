# Операция умножения часто используется со списками
# для инициализации списка заданным количеством одинаковых элементов
some_list = [0] * 10
print(some_list)

print()


# Операция * конкатенирует неполные копии списков, то есть объекты
# внутри копий не копируются, а сохраняются ссылки на них.
# Об этом следует помнить, когда в списке находятся изменяемые
# объекты, например, другие списки.

# Начинающие программисты на Python часто допускают подобную
# ошибку, когда хотят инициализировать двумерную матрицу при
# помощи списков списков.


def print_matrix(matrix):
    """Функция вывода матрицы"""
    for row in matrix:
        print(' '.join(str(element) for element in row))


# Создание матрицы 5x5 (неправильно)
matrix_done_wrong = [[0] * 5] * 5
# Пока что выводится правильно
print_matrix(matrix_done_wrong)

print()

# Изменение одного элемента
matrix_done_wrong[1][3] = 8
# Изменились соответствующие элементы во всех строках
print_matrix(matrix_done_wrong)

print()


# Это произошло из-за того, что список хранит в себе ссылки
# на объекты. Второй оператор * создал список из ссылок на
# один и тот же список. Правильным было бы использовать
# функцию deepcopy модуля copy (что в данном случае было бы
# неудобно и породило бы много кода, но было бы удобно,
# например, для создания копии уже созданной матрицы) или,
# что является лучшим решением в данном случае, создавать
# каждую строку матрицы отдельно. Проще и лаконичнее всего
# это сделать при помощи спискового включения.


# Создание матрицы 5x5 (правильно)
matrix_done_right = [[0] * 5 for _ in range(5)]
# Вывод
print_matrix(matrix_done_right)

print()

# Изменение одного элемента
matrix_done_right[1][3] = 8
# Только один элемент и изменился
print_matrix(matrix_done_right)
